#include "factory.h"


/*
简单工厂模式
该模式的核心就是将业务和界面分离。
将相同功能封装起来，根据业务的需要返回不同的对象。然而调用对象的流程都是一样的。这样就达到了简单封装的功能
简单工厂模式有一个缺点，就是有一个swtich case， 每次增加新需求都要修改这个。破坏了开放封闭原则。

工厂模式
工厂模式就是将所有的变化都封装在内部，对外只需要修改创建的工厂的
类型即可。即界面逻辑可以相同，但是具体实现都在工厂内部管理。
工厂模式是简单工厂模式的升级版，因为简单工厂模式在修改的时候，需
要修改switch和case，这里导致了类被修改了，破坏了开放-封闭原则。因
此这里为了解决这个问题，就将switch和case给拆散，创建了一个工厂类
，将switch的选择分发到具体的工厂里面去。其实就是为了去掉if,else这
种逻辑。每个工厂都有具体的实现。
只要创建了不同的工厂，那么就会生产出不同的算法。
*/

//如果在cpp里面包含c定义的头文件
extern "C" {
}

int main()
{
	fac *a = new delfac();
	cal *b = a->get_cal();
	b->get_result(1, 2);

	delete a;
	delete b;
	return 0;
}

