#include "facade.h"


/*

迪米特法则(LoD)
如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作
用，如果其中一个类需要调用另外一个类的某个方法，可以通过第三者转
发这个调用。
迪米特法则主要是强调类之间的松耦合。类之间的耦合越弱，越有利于复
用。尽量降低类与类之间的联系。


外观模式
最常用的模式之一。
即用一个类Facade包装了整个系统，调用者不需要了解具体的实现细节。
只需要知道类提供的接口就可以了。

外观模式使用场景
在设计初期阶段，就应该要有意识的将不同的两个层分开，比如经典三层
架构，需要考虑在数据访问层、业务逻辑层、表示层的层与层之间建立外
观Facade，这样可以为复杂的子系统提供一个简单的接口。降低耦合。
其次在开发阶段，子系统可能会创建越来越多的类，但是调用的用户程序
是不需要知道的，所以这里增加外观Facade可以提供一个简单的接口，减
少依赖。第三，在维护一个遗留的系统，如果有新需求，需要开发新系统
，那么最好要做一个Facade类，隔离掉用新系统与旧系统，让锡系统与
Facade对象交互，Facade与旧系统交互。

*/

//如果在cpp里面包含c定义的头文件
extern "C" {
}

int main(int argc, char **argv)
{
	team a;

	a.do_operationA();	//其他模块不需要了解内部的实现方式，只需要知道有这个API就可以了，内部由类自己实现

	std::cout << "-----------" << std::endl;

	a.do_operationB();	//这样就隔离了用户程序和内部的子系统。实现了迪米特法则
		
	return 0;
}

